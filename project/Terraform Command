Terraform:

    1  sudo yum install -y yum-utils shadow-utils
    2  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    3  sudo yum -y install terraform
    4  terraform version
    5  mkdir terraform
    6  ls
    7  cd terraform/
    8  ls
    9  vim main.tf
   10  aws configure
   11  ls -al
   12  cd ..
   13  ls -al
   14  ls .aws
   15  cat .aws/credentials
   16  cat .aws/config
   17  cd terraform/
   18  ll
   19  terraform init
   20  terraform plan
   21  vim main.tf
   22  cd ..
   23  ls -al
   24  cat .aws
   25  cat .aws/
   26  aws configure
   27  ls -al
   28  ls .aws
   29  cat .aws/credentials
   30  cat .aws/config
   31  cd terraform/
   32  ll
   33  terraform init
   34  terraform plan
   35  terraform apply
   36  terraform destroy
   37  vim main.tf
   38  terraform plan
   39  vim main.tf
   40  terraform plan
   41  vim main.tf
   42  terraform plan
   43  terraform apply
   44  terraform destroy
   45  ll
   46  vim main.tf
   47  terraform apply --auto-approve
   48  vim main.tf
   49  terraform plan --auto-approve
   50  terraform plan
   51  terraform apply --auto-approve
   52  terraform destroy --auto-approve
   53  vim main.tf
   54  terraform apply --auto-approve
   55  terraform destroy --auto-approve
   56  vim main.tf
   57  terraform apply --auto-approve
   58  terraform destroy --auto-approve
   59  vim main.tf
   60  terraform apply --auto-approve
   61  vim main.tf
   62  terraform apply --auto-approve
   63  vim main.tf
   64  terraform apply --auto-approve
   65  terraform destroy --auto-approve
   


# Terrafrom Setup:

1    sudo yum update -y
2    sudo -
3    sudo yum install -y yum-utils shadow-utils
4    sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
5    sudo yum -y install terraform
6    terrafrom version
7    mkdir terraform
8    cd terrafrom
9    ll
10   vim main.tf - All your code is main.tf

provider "aws" {
region ="us-east-1"
}
resource "aws_instance" "example" {
ami =""
instance_type ="t2.micro"
}

11   aws configure
 AWS Access Key
 AWS Secreat key :
 Defualt Regin Name:
 :Table
12   ls -al
13   cd ..
14   ls -al 
15   ls .aws
16   cat .aws/credentials
17   cat .aws/config
18   cd terrafrom/
19   ll
20   terrafrom init - Terrafrom is working with aws soif you want to create a aws resource so you need to download the plugin that required for aws
21   terraform plan
22   terrafrom apply
23   terraform destroy
24   vim main.tf
provider "aws" {
region ="us-east-1"
}
resource "aws_instance" "example" {
ami =""
instance_type =var.instance_type
}
variable "instance_type" {
description = "this is for instance type"
type = string
defualt = "t2.micro"
}
25   terraform plan
26   terraform apply
27   terraform destroy

28   vim main.tf
provider "aws" {
region ="us-east-1"
}
resource "aws_instance" "example" {
ami =""
instance_type =var.instance_type
count = var.instance_count
}
variable "instance_type" {
description = "this is for instance type"
type = string
defualt = "t2.micro"
}

variable "instance_count" {
description = "this is for instance count"
type = number
defualt =3
}

29   terraform plan
30   terraform apply
31   terraform destroy
32   terraform apply --auto-aprove
33   terraform destroy --auto-aprove


# List/Tuple:

34   vim main.tf
provider "aws" {
region ="us-east-1"
}
/*resource "aws_instance" "example" {
ami =""
instance_type =var.instance_type
count = var.instance_count
}
variable "instance_type" {
description = "this is for instance type"
type = string
defualt = "t2.micro"
}

variable "instance_count" {
description = "this is for instance count"
type = number
defualt =3
}*/

resource "aws_iam_user" "example" {
count = length(var.user_name)
name = var.user_name[count.index]
}
variable "user_name" {
description =""
type = list(string)
defualt = ["user1","user2","user3"]
}

35   terraform apply --auto-approve
36   terraform destroy --auto-approve


# Map/Obejct:

37   vim main.tf
provider "aws" {
region ="us-east-1"
}
resource "aws_instance" "example" {
ami =""
instance_type = "t2.micro"
tags = var.pro_env
}
variable "pro_env" {
description = "this is for instance type"
type = map(string)
defualt = {
project = "swiggy"
env = "prod"
manager = "raham"
}
}

38   terraform apply --auto-approve
39   terraform destroy --auto-approve
40   vim main.tf
provider "aws" {
region ="us-east-1"
}
resource "aws_instance" "example" {
ami =""
instance_type = "t2.micro"
tags = {
Name = "raham"
}
}

41   terraform apply --auto-approve
42   terraform destroy --auto-approve

# For Loop

1 vim main.tf
proivder "aws" {
region = "us-east-1"
}

resource "aws_instance" "example" {
ami = var.instance_id
instance_type = "t2.micro"
tags = {
Name = "raham"
}
}


2  vim variable.tf
  variable "instance_id" {
decription =""
type = string
defualt = copy paste ami id
}

3  terraform init
4  terraform plan
5  cd
6  vim .aws/credentials
7  cd terrafrom
8  terraform init
9  terraform plan
10 terrform apply --auto-approve
11 ll

# Terrafrom.tfvars

12 vim main.tf
proivder "aws" {
region = "us-east-1"
}
resource "aws_instance" "example" {
ami = var.instance_id
instance_type = "var.instance_type"
tags = {
Name = "raham"
}
}
13 vim variable.tf
  variable "instance_id" {
}
variable "instance_type" {
}
14  ll
15  vim swiggy.tfvar

instance_id = "Redhat ami id"
instance_type = "t2.micro"

16  vim zomato.tfvar

instance_id = "Ubuntu ami id"
instance_type = "t2.large"

17  cat variable.tf
18  cat swiggy.tfvars
19  cat zomato.tfvars
20  terraform plan -var-file="swiggy.tfvars"
21  terraform destroy --auto-apporve
22  terraform apply -var-file="swiggy.tfvars" -lock=false
23  terraform destroy
24  terraform destroy -var-file="swiggy.tfvars" --auto-approve -lock=false
25  terraform plan -var-file="zomato.tfvars"
26  terraform apply -var-file="zomato.tfvars" --auto-approve -lock=false
27  terraform destroy -var-file="zomato.tfvars" --auto-approve -lock=false
28  ll
29  rm -rf *.tfvars
30  vim main.tf
proivder "aws" {
region = "us-east-1"
}
resource "aws_instance" "example" {
ami = "copy paste ami id"
instance_type = "var.instance_type"
tags = {
Name = "raham"
}
}
variable "instance_type" {
}
31  terraform plan -var="instance_type=t2.medium" -lock=false
32  terraform apply -var="instance_type=t2.medium" -lock=false
33  terraform destroy -var="instance_type=t2.medium" -lock=false

34 vim main.tf
proivder "aws" {
region = "us-east-1"
}

local {
abc = "producation"
}

resource "aws_vpc" "staging-vpc" {
cidr_block = "10.5.0.0/16"
tags = {
Name = "${local.staging_env}-vpc" 
}
}

resource "aws_subnet" "staging-subnet" {
vpc_id = aws_vpc.staging_vpc-vpc.id
cidr_block = "10.5.0.0/16"
tags = {
Name = "${local.staging_env}-subnet
}
}

resource "aws_instance" "abc_subnet" {
ami = "copy paste ami id"
instance_type = "t2.micro"
subnet_id = aws_subnet.staging-subnet.id
tags = {
Name = "${local.staging_env}-instance"
}
}

35  terraform plan
36  terraform plan -lock=false
37  terraform apply -lock=false
38  terraform destroy -lock=false


# terraform Output:

 1 sudo -i
 2 cd terrafrom
 3 vim main.tf
provider "aws" {
region ="us-east-1"
}
resource "aws_instance" "ec2_example" {
ami =""
instance_type ="t2.micro"
tags = {
Name = "Raham"
}
}

output "my_console_output" {
value = aws_instance.ec2_example.public_ip
}

 4 terrafrom init
 5 terraform plan
 6 terrafrom apply --auto-approve
 7 vim main.tf
provider "aws" {
region ="us-east-1"
}
resource "aws_instance" "ec2_example" {
ami =""
instance_type ="t2.micro"
tags = {
Name = "Raham"
}
}

output "my_console_output" {
value = "i have created the ec2 instance with t2.micro"
}
 8 terrafrom apply --auto-approve
 9 terrafrom destroy --auto-approve

# loops with count:


10 vim main.tf
provider "aws" {
region ="us-east-1"
}
/*resource "aws_instance" "ec2_example" {
ami =""
instance_type ="t2.micro"
tags = {
Name = "Raham"
}
}*/

resource "aws_iam_user"  "example" {
count = length(var.user_names)
name = var.user_names[count.insex]
}

varibale "user_names" {
description = ""
type = list(string)
default = ["raham","sai","rajesh","raham"]
}
11 terrafrom apply --auto-approve

# for each
12 vim main.tf

provider "aws" {
region ="us-east-1"
}
/*resource "aws_instance" "ec2_example" {
ami =""
instance_type ="t2.micro"
tags = {
Name = "Raham"
}
}*/

resource "aws_iam_user"  "example" {
count = length(var.user_names)
for_each =var.user_names
name = each.value
}
varibale "user_names" {
description = ""
type = set(string)
default = ["raham","sai","rajesh" "raham"]
}

13 terrafrom destroy --auto-approve
14 terrafrom apply --auto-approve
15 terrafrom destroy --auto-approve
16 vim main.tf

provider "aws" {
region ="us-east-1"
}
/*resource "aws_instance" "ec2_example" {
ami =""
instance_type ="t2.micro"
tags = {
Name = "Raham"
}
}*/

output "my_console_output" {
value = [for name in var.user : name]
}

varibale "user_names" {
description = ""
type = set(string)
default = ["raham","sai","rajesh" "raham"]
}
 17 terrafrom apply --auto-approve

# terrafrom Workspace :

1 terraform workspace show       - will show on current workspace by defult we have
2 terraform workspace list       - will give of the list of workspace 
3 terraform workspace new dev    - To create new workspace
4 terraform workspace new test
5 terraform workspace new prod
6 terraform workspace list 
7 terraform workspace show  
8 terraform workspace delete (workspace-name)  -if you want to delete the workspace 
9 terraform workspace select dev     -if you want to switch one workspace to another workspace
10 cat main.tf
11 vim main.tf
provider "aws" {
region ="us-east-1"
}

locals {
instance_name = "${terrafrom.workspace}-instance"
}
resource "aws_instance" "ec2_example" {
ami =""
instance_type ="t2.micro"
tags = {
Name = local.instance_name
}
}
12 terrafrom workspace show
13 cat main.tf
14 terrafrom apply --auto-approve
15 terraform workspace select prod
16 cat main.tf
17 terrafrom apply --auto-approve
18 terraform workspace delete prod
19 terraform workspace delete dev
20 terrafrom destroy --auto-approve
21 terraform workspace select dev
22 terraform workspace delete prod
23 terraform workspace delete test
24 terraform workspace select default
25 erraform workspace delete dev
26 terraform workspace list 
27 vim main.tf
provider "aws" {
region ="us-east-1"
}

/*resource "aws_instance" "ec2_example" {
ami =""
instance_type ="t2.micro"
tags = {
Name = local.instance_name
}
}*/

resource "aws_s3_bucket" "example" {
bucket = "rahul7787878"
}

28 terrafrom apply --auto-approve
29 terrafrom destroy --auto-approve
30 vim main.tf
provider "aws" {
region ="us-east-1"
}

/*resource "aws_instance" "ec2_example" {
ami =""
instance_type ="t2.micro"
tags = {
Name = local.instance_name
}
}*/

resource "aws_s3_bucket" "example" {
bucket = "rahul7787878"
acl = "priavte"
}
31 terrafrom apply --auto-approve
32 terrafrom destroy --auto-approve

# Dynamic Block - the main purpose of dynamic block is reusalbilty of code

1 sudo -i
2 cd terraform/
3 vim main.tf

--- Dynamic block code ----

4 terrafrom init
5 terrfrom apply --auto-approve
6 terrafrom destroy --auto-approve
